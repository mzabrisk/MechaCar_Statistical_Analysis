source("~/Desktop/Bootcamp/R_Analysis/01_Demo/demo_stats.R")
c
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import used car dataset
population_table <- read.csv('01_Demo/used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
library(tidyverse)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
View(population_table)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=Miles_Driven))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#visualize distribution
plt + geom_density()
#randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
# import dataset into ggplot2
plt<- ggplot(sample_table,aes(x=log10(Miles_Driven)))
#visualize distribution
plt + geom_density()
?t.test()
#test if the miles driven from our previous sample dataset is statistically
#different from the miles driven in our population data
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
library(tidyverse)
version
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students) {
print(student)
}
# Call the function with the student vector as an argument.
roll_call
# Call the function with the student vector as an argument.
roll_call(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
# Call the function with the student vector as an argument.
roll_call(students)
for (student in students) {
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
for (student in students) {
print(student)
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
for (student in students) {
print(student)
}
for (student in students) {
print(student)
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
students
print(students)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
print(students)
library(tidyverse)
print(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
print(students)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
roll_call
roll_call(students)
print(students)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
print(students)
exit
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
roll_call(students)
roll_call
roll_call(students)
roll_call
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
# Call the function with the student vector as an argument.
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
conbination = sample(33,3)
print(paste(student, "has combination of",combination,sep=' '))
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
combination = sample(33,3)
print(paste(student, "has combination of",combination,sep=' '))
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
combination = sample(33,3)
print(paste(student, "has combination of",sep=' '))
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(substring)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == 'e'){
locker_combinations(student)
} else {
print("Not needed; not hacked")
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student, 2, 2)
#print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (substring == 'e'){
locker_combinations(student)
} else {
print("Not needed; not hacked")
}
}
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
typeof(precipitation)
# Assign names to a vector
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
# Access a single member of precipitation by its name
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
# Summary of data
# Display summary data of precipitation
summary(precipitation)
# Store the results in a vector.
precipitation_summary <- summary(precipitation)
# Access features of a summary
precipitation_summary["Min."]
precipitation_summary["Mean"]
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
# Use double brackets to access only the value
precipitation_summary[["Max."]]
# Standard deviation
# Display the standard deviation
sd(precipitation)
---
title: "Navigation"
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sample_csv <- read_csv("data.csv")
head(sample_csv)
View(sample_csv)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
count(diamonds, cut)
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
# Use double brackets to access only the value
precipitation_summary[["Max."]]
# Use pipe operators to express a sequence of operations
precipitation %>% summary() %>% max()
# Standard deviation
# Display the standard deviation
sd(precipitation)
stdev <- sd(precipitation)
round(stdev, 2)
precipitation %>% sd()
3.141592653 %>% round(2)
precipitation %>% sd() %>% rount(2)
precipitation %>% sd() %>% round(2)
# A few more methods
# Determine the length of a vector
length(precipitation)
yearly_precipitation
yearly_precipitation <- sum(precipitation)
yearly_precipitation
# The same operations, this time using pipes
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sample_csv <- read_csv("data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
force(diamonds)
View(diamonds)
nrow(diamonds)
head(diamonds, 10)
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
filter(diamonds, (cut=='Ideal' & price > 5000))
filter(diamonds, (cut=='Ideal' & price > 15000))
total_volume <- mutate(diamonds, x * y * z)
total_volume
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
summarize(diamonds, mean(carat))
summarize(diamonds, max(carat))
summarize(diamonds, max(price))
summarize(diamonds, mean(price))
summarize(diamonds, mean(price), min(price), max(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, mean(price), sum(price), mean(carat))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
students <-read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students, school)name
# unique(dataset, variable) displays unique elements from that column
unique(students, school_name)
# unique(dataset, variable) displays unique elements from that column
unique(students, students[school_name])
# unique(dataset, variable) displays unique elements from that column
unique(students, students$school_name)
# unique(dataset, variable) displays unique elements from that column
unique(students, students["school_name"])
# unique(dataset, variable) displays unique elements from that column
unique(students, students["school_name"])
# unique(dataset, variable) displays unique elements from that column
unique(students, "school_name")
# unique(dataset, variable) displays unique elements from that column
unique(students, grade)
# unique(dataset, variable) displays unique elements from that column
unique(students, 'grade')
# unique(dataset, variable) displays unique elements from that column
unique(students[school_name])
# unique(dataset, variable) displays unique elements from that column
unique(students['school_name'])
# Use length() to identify the number of schools
length(unique(students['school_name']))
# Use length() to identify the number of schools
unique(students['school_name']) %>% length()
school_count <- unique(students['school_name'])
# Use length() to identify the number of schools
length(school_count)
# unique(dataset, variable) displays unique elements from that column
unique(students['school_name'])
school_count <- unique(students['school_name'])
# Use length() to identify the number of schools
length(school_count)
school_count <- unique(students['school_name'])
# Use length() to identify the number of schools
length(school_count)
print(school_count)
school_count <- unique(students$school_name)
print(school_count)
# Use length() to identify the number of schools
length(school_count)
# nrow() returns the number of rows
nrow(students)
paste("There are a total of", student_count, "students.")
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
mean_reading_score <- mean(students$reading_score)
paste("The average reading score is", mean_reading_score)
mean_math_score <- mean(students$math_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- round(mean(students$reading_score), 2)
paste("The average reading score is", mean_reading_score)
mean_math_score <- mean(students$math_score)
paste("The average math score is", mean_math_score)
mean_math_score <- round(mean(students$math_score),2)
mean_reading_score <- round(mean(students$reading_score), 2)
paste("The average reading score is", mean_reading_score)
mean_math_score <- round(mean(students$math_score),2)
paste("The average math score is", mean_math_score)
?filter()
percent_passing_reading <- filter(students$reading_score >70)
percent_passing_reading <- filter(students, students$reading_score >70)
percent_passing_reading <- filter(students, students$reading_score >70)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percent_passing_reading <- filter(students, students$reading_score >70)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percent_passing_reading <- filter(students, eading_score >70)
percent_passing_reading <- filter(students, reading_score >70)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_reading <- filter(students, reading_score >70)
percentage_passing_reading <- filter(students, reading_score >70)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_reading <- nrows(filter(students, reading_score >70))/nrows(students)
percentage_passing_reading <- nrows(filter(students, reading_score >70))/nrows(students)
percentage_passing_reading <- nrow(filter(students, reading_score >70))/nrow(students)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_reading <- nrow(filter(students, reading_score >70))/nrow(students)*100
percentage_passing_reading <- nrow(filter(students, reading_score >70))/nrow(students)*100
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_reading <- round(nrow(filter(students, reading_score >70))/nrow(students)*100,2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
percentage_passing_math <- round(nrow(filter(students, math_score > 70))/nrow(students),2)
paste(percentage_passing_math, "% of the students have passing math scores.")
percentage_passing_math <- round(nrow(filter(students, math_score > 70))/nrow(students)*100,2)
paste(percentage_passing_math, "% of the students have passing math scores.")
percentage_passing_overall <- round(nrow(filter(students, reading_score > 70 & math_score > 70))/nrow(students)*100,2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
avg_math_by_school <- students %>% group_by(school_name) %>% mean(math_score)
avg_math_by_school <- students %>% group_by(school_name)
avg_math_by_school <- students %>% group_by(school_name) %>% mean()
avg_math_by_school <- students %>% mean(math_score %>% group_by(school_name)
avg_math_by_school <- students %>% mean(math_score) %>% group_by(school_name)
avg_math_by_school <- students %>% mean(math_score) %>% group_by(school_name)
summarize(group_by(students, school_name), mean(reading_score), mean(math_score))
summarize(group_by(students, school_name), round(mean(reading_score), 2), round(mean(math_score),2)
summarize(group_by(students, school_name), round(mean(reading_score), 2), round(mean(math_score),2)
summarize(group_by(students, school_name), round(mean(reading_score), 2), round(mean(math_score),2))
View(students)
summarize(group_by(students, school_name, grade), round(mean(reading_score), 2), round(mean(math_score),2))
?t.test()
#PAIRED T-TEST
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#PAIRED T-TEST
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#PAIRED T-TEST
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
# PART 1
# read in data
car_data <- read_csv('Data/MechaCar_mpg.csv')
library(tidyverse)
# PART 1
# read in data
car_data <- read_csv('Data/MechaCar_mpg.csv')
setwd("~/Desktop/Bootcamp/repos/MechaCar_Statistical_Analysis")
# PART 1
# read in data
car_data <- read_csv('Data/MechaCar_mpg.csv')
# PART 1
# read in data
car_data <- read_csv('Data/MechaCar_mpg.csv')
View(car_data)
# PART 2
coil_data <- read_csv('Data/Suspension_Coil.csv')
